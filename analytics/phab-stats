#!/usr/bin/env python

# This script generates a set of productivity related metrics for a given
# Phabricator workboard and time range. The Phabricator workboard details
# must be specified via config file (see phab-stats-config.json). The time
# range is specified via start_date and end_date parameters.
#
# IMPORTANT: The script assumes that resolved tasks stay in the workboard
# 'forever'. This way, it can get the workboard via http, parse it and get
# all tasks that some day travelled through it.


import os
import re
import argparse
import json
import phabricator
import requests
from datetime import datetime
from bs4 import BeautifulSoup


WORKBOARD_URL_TEMPLATE = 'https://phabricator.wikimedia.org/project/board/%s/query/all/'
DATE_FORMAT = '%Y-%m-%d'


def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Generate metrics on Phabricator workboard ' +
                    'activity for a given date range.')
    def date_type(date_str):
        return datetime.strptime(date_str, DATE_FORMAT)
    parser.add_argument('start_date',
        help='Start of the interval for the generated summary (YYYY-MM-DD).',
        type=date_type)
    parser.add_argument('end_date',
        help='End of the interval for the generated summary (YYYY-MM-DD).',
        type=date_type)
    this_file_dir = os.path.dirname(os.path.realpath(__file__))
    parser.add_argument('--config',
        help='Location of the config file. Default: phab-stats-config.json.',
        default=os.path.join(this_file_dir, 'phab-stats-config.json'))
    return parser.parse_args()


def get_config(args):
    with open(args.config, 'r') as config_file:
        config = json.loads(config_file.read())
        # A map from column names to column values (scores).
        # Necessary to compute some metrics.
        config['column_values'] = {c['name']: c['value'] for c in config['columns']}
        # A map from column phab-ids to column names.
        # Necessary to understand Phabricator api response.
        config['column_names'] = {c['phid']: c['name'] for c in config['columns']}
    return config


class Task(object):
    """
    This class represents a Phabricator task.
    It also groups some convenient methods on task transactions.
    Phabricator stores any task update as a transaction. So, parsing
    a list of task transactions, lots of information can be extracted.
    """

    # The pattern that matches point definitions in task names.
    POINTS_REGEXP = re.compile(r'\[([0-9]+)\s*pts\]')

    def __init__(self, id, name, column):
        self.id = id
        self.name = name
        self.column = column
        self.points = self.parse_points(name)
        # The transaction list is asigned separately for performance reasons.
        # All task transactions for all the tasks are requested together in
        # the same api call. So, after that, all tasks are decorated with it.
        self.transactions = None

    def parse_points(self, name):
        match = Task.POINTS_REGEXP.search(name, re.I)
        if match:
            return int(match.group(1))
        else:
            return None

    def resolved_between(self, start_date, end_date):
        """
        Returns True if the task was resolved between the two dates.
        """
        for transaction in self.transactions:
            if (transaction['transactionType'] == 'status' and
                    transaction['newValue'] == 'resolved'):
                timestamp = int(transaction['dateCreated'])
                transaction_date = datetime.fromtimestamp(timestamp)
                return (
                    transaction_date >= start_date and
                    transaction_date < end_date
                )
        return False

    def column_at(self, date, config):
        """
        Returns the value of the column in which the task was at the given date.
        """
        current_column = self.column
        # Transactions are sorted by timestamp, newest to oldest.
        for transaction in self.transactions:
            if transaction['transactionType'] == 'projectcolumn':
                timestamp = int(transaction['dateCreated'])
                transaction_date = datetime.fromtimestamp(timestamp)
                if transaction_date >= date:
                    columns = self.get_transaction_columns(transaction, config)
                    current_column = columns['oldValue']
                else:
                    # First column change before the given date.
                    # This means the current_column is the requested value.
                    break
        return current_column

    def steps_between(self, start_date, end_date, config):
        """
        Returns the number of column changes that a task has suffered,
        regardless if they are forwards or backwards. Only specified
        workboard columns do count. If a task jumps various steps in one
        transaction, they are counted as separate.
        """
        steps = 0
        for transaction in self.transactions:
            if transaction['transactionType'] == 'projectcolumn':
                columns = self.get_transaction_columns(transaction, config)
                steps += abs(columns['newValue'] - columns['oldValue'])
        return steps

    def get_transaction_columns(self, transaction, config):
        """
        Assumes the transaction is of type 'projectcolumn'.
        Returns the transaction's normalized old and new column values.
        """
        column_values = {}
        for kind in ['oldValue', 'newValue']:
            column_phids = transaction[kind]['columnPHIDs']
            # Phabricator api is crazy and returns different data types
            # for the same field. Sometimes list, sometimes dict.
            if type(column_phids) == list and len(column_phids) > 0:
                column_phid = column_phids[0]
            elif type(column_phids) == dict and len(column_phids) > 0:
                column_phid = column_phids.values()[0]
            else:
                column_values[kind] = 0 # Outside of workboard.
                continue
            # Translate Phabricator column phab-ids into column values.
            if column_phid in config['column_names']:
                column_name = config['column_names'][column_phid]
                column_values[kind] = config['column_values'][column_name]
            else:
                column_values[kind] = 0 # Outside of workboard.
        return column_values


def parse_workboard_html(workboard_html, config):
    """
    Parses workboard html looking for columns, tasks,
    their titles and ids. Returns a list of task objects.
    """
    soup = BeautifulSoup(workboard_html, 'lxml')
    columns = soup.find_all(class_='phui-workpanel-view')
    tasks = []
    for column in columns:
        column_name = column.find(class_='phui-header-header').strings.next()
        if column_name in config['column_values']:
            column_value = config['column_values'][column_name]
            column_tasks = column.find_all(class_='phui-object-item-name')
            for column_task in column_tasks:
                task_id = int(column_task.find(class_='phui-object-item-objname').string[1:])
                task_name = column_task.find(class_='phui-object-item-link').string
                task = Task(task_id, task_name, column_value)
                tasks.append(task)
    return tasks


def calculate_points_resolved(tasks, args, config):
    """
    Returns the sum of task points in all tasks that have been
    marked as resolved between args.start_date and args.end_date.
    """
    points_resolved = 0
    for task in tasks:
        if task.resolved_between(args.start_date, args.end_date):
            points_resolved += task.points or config['default_points']
    return points_resolved


def calculate_points_moved_to_the_right(tasks, args, config):
    """
    For each task, gets the column it was placed at args.start_date and
    at args.end_date, and calculates how many columns the task has moved
    forward. For each step, adds 1/N of the task's points, where N is
    the total number of steps defined in the workboard. Returns the sum
    of it all.
    """
    total_columns = float(max([c['value'] for c in config['columns']]))
    points_moved_right = 0
    for task in tasks:
        initial_column = task.column_at(args.start_date, config)
        final_column = task.column_at(args.end_date, config)
        columns_moved = final_column - initial_column
        task_points = task.points or config['default_points']
        points_moved_right += columns_moved / total_columns * task_points
    return points_moved_right


def calculate_average_steps(tasks, args, config):
    """
    Returns the average number of column changes that the tasks marked
    as resolved between args.start_date and args.end_date have seen.
    Forward changes and backward changes all sum up.
    """
    steps_count = 0
    resolved_count = 0
    for task in tasks:
        if task.resolved_between(args.start_date, args.end_date):
            steps_count += task.steps_between(args.start_date, args.end_date, config)
            resolved_count += 1
    return steps_count / float(resolved_count) if resolved_count > 0 else 0


if __name__ == '__main__':
    args = parse_arguments()
    config = get_config(args)

    # Parse the workboard for tasks and their positions.
    response = requests.get(WORKBOARD_URL_TEMPLATE % config['workboard'])
    tasks = parse_workboard_html(response.text, config)

    # Get the task transactions from Phabricator.
    phab = phabricator.Phabricator(timeout=500)
    task_ids = [t.id for t in tasks]
    transactions = phab.maniphest.gettasktransactions(ids=task_ids)

    # Decorate the tasks witht their transactions.
    for task in tasks:
        task.transactions = transactions[str(task.id)]

    # Calculate the metrics.
    points_resolved = calculate_points_resolved(tasks, args, config)
    points_moved = calculate_points_moved_to_the_right(tasks, args, config)
    average_steps = calculate_average_steps(tasks, args, config)

    # Write output.
    print('Date\tPoints resolved\tPoints moved to the right\tAverage steps')
    print('%s\t%d\t%.1f\t%.2f' % (
        args.start_date.strftime(DATE_FORMAT),
        points_resolved,
        points_moved,
        average_steps
    ))
